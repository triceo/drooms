package org.drooms.strategy.random;

import org.slf4j.Logger;
import org.drooms.impl.logic.facts.Positioned;
import org.drooms.impl.logic.facts.CurrentPlayer;
import org.drooms.impl.logic.events.PlayerActionEvent;
import java.util.Random;
import java.util.ArrayList;
import org.drooms.api.Action;
import org.drooms.api.Node;

global Logger logger;

declare entry-point rewardEvents
    @doc("A stream of reward events generated by the game")
end

declare entry-point gameEvents
    @doc("A stream of non-reward events generated by the game")
end

declare entry-point playerEvents
    @doc("A stream of events generated by players")
end

declare CurrentPosition
    node: Node
end

declare PlayerActionEvent
    @role (event)
end

rule "Determine current position of a player"
salience 50
when
    CurrentPlayer($p: player)
    $added: PlayerActionEvent(player == $p) from entry-point "playerEvents"
    not PlayerActionEvent(player == $p, this after $added) from entry-point "playerEvents"
then
    insertLogical (
        new CurrentPosition($added.getHeadNode())
    );
end

rule "Determine whether a position to the left is available to be moved into"
when
    CurrentPosition($x: node.getX(), $y: node.getY())
    not Positioned(x == ($x - 1), y == $y)
then
    logger.debug("LEFT move is available.");
    insertLogical (
        Action.MOVE_LEFT
    );
end

rule "Determine whether a position to the right is available to be moved into"
when
    CurrentPosition($x: node.getX(), $y: node.getY())
    not Positioned(x == ($x + 1), y == $y)
then
    logger.debug("RIGHT move is available.");
    insertLogical (
        Action.MOVE_RIGHT
    );
end

rule "Determine whether a position to the top is available to be moved into"
when
    CurrentPosition($x: node.getX(), $y: node.getY())
    not Positioned(x == $x, y == ($y + 1))
then
    logger.debug("UP move is available.");
    insertLogical (
        Action.MOVE_UP
    );
end

rule "Determine whether a position to the bottom is available to be moved into"
when
    CurrentPosition($x: node.getX(), $y: node.getY())
    not Positioned(x == $x, y == ($y - 1))
then
    logger.debug("DOWN move is available.");
    insertLogical (
        Action.MOVE_DOWN
    );
end

rule "Pick one of the available moves at random"
salience -10
when
    $moves : ArrayList( size > 0 ) from collect( Action() )
then
    int size = $moves.size();
    Random random = new Random(System.nanoTime());
    channels["decision"].send($moves.get(random.nextInt(size)));
end
